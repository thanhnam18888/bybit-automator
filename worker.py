#!/usr/bin/env python3
import os
import subprocess
from datetime import datetime, timezone
from apscheduler.schedulers.blocking import BlockingScheduler

# Th∆∞ m·ª•c ch·ª©a file CSV P2P history (ƒë∆∞·ª£c mount v√†o /data/bybit_full_history)
HISTORY_DIR = "/data/bybit_full_history"

# Th∆∞ m·ª•c g·ªëc c·ªßa project (ch·ª©a worker.py, 57.py, b11timeok.py, check_data_dir.py)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c script
SCRIPT_57 = os.path.join(BASE_DIR, "57.py")
SCRIPT_B7 = os.path.join(BASE_DIR, "b11timeok.py")

# ƒê·∫£m b·∫£o ƒë·∫ßu ra Unicode
os.environ["PYTHONIOENCODING"] = "utf-8"

def job():
    print("üîç DEBUG: job() b·∫Øt ƒë·∫ßu ch·∫°y.", flush=True)
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    print(f"[{timestamp}] === Running BYBIT WORKER JOB ===", flush=True)

    # Ki·ªÉm tra s·ªë file trong folder history
    try:
        files = os.listdir(HISTORY_DIR)
        print(f"üì¶ S·ªë file trong {HISTORY_DIR}: {len(files)}", flush=True)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c d·ªØ li·ªáu: {e}", flush=True)
        return

    # Ch·∫°y script 57.py unbuffered
    print(f"[{timestamp}] === Starting 57.py ===", flush=True)
    r1 = subprocess.run(["python", "-u", SCRIPT_57], capture_output=True, text=True)
    print("üì§ 57.py output:
", r1.stdout, flush=True)
    if r1.stderr:
        print("‚ùå Error (57.py):", r1.stderr, flush=True)

    # Ch·∫°y script b11timeok.py unbuffered
    print(f"[{timestamp}] === Starting b11timeok.py ===", flush=True)
    r2 = subprocess.run(["python", "-u", SCRIPT_B7], capture_output=True, text=True)
    print("üì§ b11timeok.py output:
", r2.stdout, flush=True)
    if r2.stderr:
        print("‚ùå Error (b11timeok.py):", r2.stderr, flush=True)

if __name__ == "__main__":
    # Ch·∫°y job l·∫ßn ƒë·∫ßu ngay khi kh·ªüi ƒë·ªông
    print("üß™ G·ªçi job() l·∫ßn ƒë·∫ßu...", flush=True)
    job()

    # Thi·∫øt l·∫≠p scheduler ch·∫°y m·ªói gi·ªù v√†o ph√∫t 01 UTC
    scheduler = BlockingScheduler(timezone="UTC")
    scheduler.add_job(job, "cron", minute=1)
    print("üïí Scheduler started. Job s·∫Ω ch·∫°y m·ªói gi·ªù v√†o ph√∫t 01 UTC.", flush=True)
    scheduler.start()
