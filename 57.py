#!/usr/bin/env python3
import os
import time
import random
import pandas as pd
import numpy as np
from datetime import datetime
import requests
from multiprocessing import Pool

# === C√†i ƒë·∫∑t ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
folder_path = os.path.join(BASE_DIR, "bybit_full_history")
interval = "60"
total_limit = 1200  # t·ªïng s·ªë n·∫øn c·∫ßn
batch_size = 200    # m·ªói l·∫ßn g·ªçi 200 n·∫øn
window = 499        # lookback bars (0..499)
h = 8.0

# ... (c√°c h√†m h·ªó tr·ª£: calc_nwe_full, process_file, etc.) ...

def process_file(filename):
    symbol = filename.replace("_1h.csv", "")
    path = os.path.join(folder_path, filename)
    try:
        df = pd.read_csv(path, parse_dates=["timestamp"])
    except Exception as e:
        print(f"‚ùå Error ƒë·ªçc file {filename}: {e}", flush=True)
        return

    # (logic fetch v√† t√≠nh to√°n)
    # ...
    # Sau khi t√≠nh df ƒë·∫ßy ƒë·ªß bars
    if os.path.exists(path):
        os.remove(path)
    df.to_csv(path, index=False)
    print("‚úÖ", symbol, "c·∫≠p nh·∫≠t xong", len(df), "bars", flush=True)

if __name__ == "__main__":
    # Li·ªát k√™ file trong th∆∞ m·ª•c
    try:
        files = os.listdir(folder_path)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c d·ªØ li·ªáu: {e}", flush=True)
        exit(1)
    if not files:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file CSV trong {folder_path}", flush=True)
    else:
        print(f"üîç 57.py ƒëang ch·∫°y v·ªõi th∆∞ m·ª•c {folder_path}, t·ªïng files: {len(files)}", flush=True)

    # D√πng Pool ƒëa ti·∫øn tr√¨nh
    with Pool(processes=5) as pool:
        pool.map(process_file, files)
